enum Token {
  DAI
  USDC
}

enum ZToken {
  zDAI
  zUSDC
}

enum LendingPoolAction {
  Deposit
  Repay
  Withdraw
  Liquidate
}

enum SettingName {
  RequiredSubmissions
  MaximumTolerance
  ResponseExpiryLength
  SafetyInterval
}

enum EthEvent {
  LoanTermsSet
  LoanTakenOut
  LoanRepaid
  CollateralWithdrawn
  CollateralDeposited
  TokenDeposited
  TokenWithdrawn
  TokenRepaid
  PaymentLiquidated
  SignerAdded
  SignerRemoved
  InterestSubmitted
  InterestAccepted
  AccruedInterestUpdated
  AccruedInterestWithdrawn
  InterestUpdateRequested
  CancelInterestUpdate
  ZTokenTransfer
  ZTokenApproval
  ZTokenMinterAdded
  ZTokenMinterRemoved
  SettingUpdated
  LendingPoolPaused
  LendingPoolUnpaused
}

enum LoanStatus {
  TermsSet
  Active
  Closed
}

enum InterestUpdateStatusAction {
  Requested
  Canceled
}

enum AccruedInterestStatusAction {
  Withdrawn
  Updated
}

enum ZTokenStatusAction {
  Transfer
  Approval
  MinterAdded
  MinterRemoved
}

type EthTransaction @entity {
  id: ID!
  event: EthEvent!
  from: Bytes!
  gasPrice: BigInt!
  gasSent: BigInt!
  hash: Bytes!
  index: BigInt!
  to: Bytes!
  value: BigInt!
  contract: Bytes!
  timestamp: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

type Borrower @entity {
  id: ID!
  address: Bytes!
  loans: [Loan!]! @relation
}

type Loan @entity {
  id: ID!
  transaction: EthTransaction!
  borrower: Borrower!
  recipient: Bytes!
  terms: LoanTerm!
  startDate: BigInt! # https://github.com/graphql/graphql-js/issues/1003#issuecomment-324790647
  endDate: BigInt!
  amountBorrowed: BigInt!
  status: LoanStatus!
  repayments: [LoanRepayment!]!
  totalRepaidAmount: BigInt!
  collateralDeposits: [CollateralDeposit!]!
  totalCollateralDepositsAmount: BigInt!
  collateralWithdrawns: [CollateralWithdraw!]!
  totalCollateralWithdrawalsAmount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LoanTerm @entity {
  id: ID! # LoanID
  transaction: EthTransaction!
  interestRate: BigInt!
  collateralRatio: BigInt! 
  maxLoanAmount: BigInt!
  duration: BigInt!
  expiryAt: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LoanRepayment @entity {
  id: ID!
  transaction: EthTransaction!
  amount: BigInt!
  payer: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type CollateralDeposit @entity {
  id: ID!
  transaction: EthTransaction!
  loan: Loan!
  borrower: Borrower!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type CollateralWithdraw @entity {
  id: ID!
  transaction: EthTransaction!
  loan: Loan!
  borrower: Borrower!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LendingPoolStatus @entity {
  id: ID!
  zToken: ZToken!
  lendingToken: Token!
  transaction: EthTransaction!
  address: Bytes!
  amount: BigInt!
  action: LendingPoolAction!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type InterestSubmitted @entity {
  id: ID!
  transaction: EthTransaction!
  signer: Bytes!
  lender: Bytes!
  blockNumber: BigInt!
  interest: BigInt!
  timestamp: BigInt!
}

type InterestAccepted @entity {
  id: ID!
  transaction: EthTransaction!
  lender: Bytes!
  blockNumber: BigInt!
  interest: BigInt!
  acceptedAt: BigInt!
}

type AccruedInterestStatus @entity {
  id: ID!
  transaction: EthTransaction!
  lender: Bytes!
  totalAmount: BigInt!
  accruedInterest: BigInt!
  action: AccruedInterestStatusAction!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type InterestUpdateStatus @entity {
  id: ID!
  transaction: EthTransaction!
  lender: Bytes!
  blockNumber: BigInt!
  updatedAt: BigInt!
  action: InterestUpdateStatusAction!
}

type ZTokenBalance @entity {
  id: ID!
  amount: BigInt!
  zToken: ZToken!
  account: Bytes!
  blockNumber: BigInt!
  updatedAt: BigInt!
}

type ZTokenStatus @entity {
  id: ID!
  transaction: EthTransaction!
  amount: BigInt!
  zToken: ZToken!
  from: Bytes!
  to: Bytes!
  action: ZTokenStatusAction!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type Setting @entity {
  id: ID!
  settingName: SettingName!
  value: BigInt!
  lastBlockNumber: BigInt!
  lastTimestamp: BigInt!
}

type SettingsStatus @entity {
  id: ID!
  transaction: EthTransaction!
  oldValue: BigInt!
  newValue: BigInt!
  from: Bytes!
  settingName: SettingName!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LendingPoolPause @entity {
  id: ID!
  lendingPool: Bytes!
  paused: Boolean!
  lastBlockNumber: BigInt!
  lastTimestamp: BigInt!
}

type LendingPoolPauseStatus @entity {
  id: ID!
  transaction: EthTransaction!
  paused: Boolean!
  lendingPool: Bytes!
  from: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}
