enum CToken {
  cDAI
  cUSDC
}

enum Token {
  DAI
  USDC
}

enum CollateralToken {
  ETH
  LINK
}

enum ConsensusContract {
  LoanTermsConsensus
  InterestConsensus
}

enum ZToken {
  zDAI
  zUSDC
}

enum LendingPoolAction {
  Deposited
  Withdrawn
  Repaid
  InterestWithdrawn
  PaymentLiquidated
}

enum EthEvent {
  # Loans
  CollateralDeposited
  CollateralWithdrawn
  LoanTermsSet
  LoanTakenOut
  LoanRepaid
  LoanLiquidated

  # Lenders
  AccruedInterestUpdated
  AccruedInterestWithdrawn

  # LendingPool
  TokenDeposited
  TokenWithdrawn
  TokenRepaid
  InterestWithdrawn
  PaymentLiquidated

  # Settings
  SettingUpdated
  LendingPoolPaused
  LendingPoolUnpaused
  Paused
  Unpaused
  PauserAdded
  PauserRemoved

  # Interest Consensus
  InterestSubmitted
  InterestAccepted

  # Loan Terms Consensus
  TermsSubmitted
  TermsAccepted

  # Consensus
  SignerAdded
  SignerRemoved

  # ZTokens
  ZTokenTransfer
  ZTokenApproval
  ZTokenMinterAdded
  ZTokenMinterRemoved
}

enum LoanStatus {
  TermsSet
  Active
  Closed
}

enum ZTokenStatusAction {
  Transfer
  Approval
  MinterAdded
  MinterRemoved
}

type EthTransaction @entity {
  id: ID!
  event: EthEvent!
  from: Bytes!
  gasPrice: BigInt!
  gasSent: BigInt!
  hash: Bytes!
  index: BigInt!
  to: Bytes!
  value: BigInt!
  contract: Bytes!
  timestamp: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

type Borrower @entity {
  id: ID!
  address: Bytes!
  loans: [Loan!]! @relation
}

type Loan @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  borrower: Borrower!
  recipient: Bytes!
  terms: LoanTerm!
  startDate: BigInt! # https://github.com/graphql/graphql-js/issues/1003#issuecomment-324790647
  endDate: BigInt!
  amountBorrowed: BigInt!
  status: LoanStatus!
  repayments: [LoanRepayment!]!
  totalRepaidAmount: BigInt!
  totalOwedAmount: BigInt!
  collateralDeposits: [CollateralDeposit!]!
  totalCollateralDepositsAmount: BigInt!
  collateralWithdrawns: [CollateralWithdraw!]!
  totalCollateralWithdrawalsAmount: BigInt!
  liquidation: Liquidation
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LoanTerm @entity {
  id: ID! # LoanID
  transaction: EthTransaction!
  interestRate: BigInt!
  collateralRatio: BigInt! 
  maxLoanAmount: BigInt!
  duration: BigInt!
  expiryAt: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type Liquidation @entity {
  id: ID! # LoanID
  transaction: EthTransaction!
  loan: Loan!
  liquidator: Bytes!
  collateralOut: BigInt!
  tokensIn: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LoanRepayment @entity {
  id: ID!
  transaction: EthTransaction!
  loan: Loan!
  amount: BigInt!
  payer: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type CollateralDeposit @entity {
  id: ID!
  transaction: EthTransaction!
  loan: Loan!
  borrower: Borrower!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type CollateralWithdraw @entity {
  id: ID!
  transaction: EthTransaction!
  loan: Loan!
  borrower: Borrower!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LendingPoolStatus @entity {
  id: ID!
  zToken: ZToken!
  lendingToken: Token!
  collateralToken: CollateralToken!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LendingPoolChange @entity {
  id: ID!
  zToken: ZToken!
  lendingToken: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  address: Bytes!
  amount: BigInt!
  action: LendingPoolAction!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type InterestSubmitted @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  signer: Bytes!
  lender: Bytes!
  requestNonce: BigInt!
  interest: BigInt!
  endTime: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type InterestAccepted @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  lender: Bytes!
  requestNonce: BigInt!
  endTime: BigInt!
  interest: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LoanTermsSubmitted @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  signer: Bytes!
  borrower: Bytes!
  requestNonce: BigInt!
  interestRate: BigInt!
  collateralRatio: BigInt!
  maxLoanAmount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LoanTermsAccepted @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  borrower: Bytes!
  requestNonce: BigInt!
  interestRate: BigInt!
  collateralRatio: BigInt!
  maxLoanAmount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type AccruedInterestChange @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  lender: Bytes!
  totalNotWithdrawn: BigInt!
  totalAccruedInterest: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type AccruedInterestWithdrawalChange @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  transaction: EthTransaction!
  recipient: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type ZTokenStatus @entity {
  id: ID!
  amount: BigInt!
  zToken: ZToken!
  account: Bytes!
  blockNumber: BigInt!
  updatedAt: BigInt!
}

type ZTokenChange @entity {
  id: ID!
  transaction: EthTransaction!
  amount: BigInt!
  zToken: ZToken!
  from: Bytes!
  to: Bytes!
  action: ZTokenStatusAction!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SettingsStatus @entity {
  id: ID!
  settingName: String!
  value: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SettingsChange @entity {
  id: ID!
  transaction: EthTransaction!
  oldValue: BigInt!
  newValue: BigInt!
  from: Bytes!
  settingName: String!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LendingPoolPauseStatus @entity {
  id: ID!
  lendingPool: Bytes!
  paused: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LendingPoolPauseChange @entity {
  id: ID!
  transaction: EthTransaction!
  paused: Boolean!
  lendingPool: Bytes!
  from: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SignerStatus @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  contract: ConsensusContract!
  account: Bytes!
  removed: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type SignerChange @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  contract: ConsensusContract!
  transaction: EthTransaction!
  account: Bytes!
  removed: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type PauserStatus @entity {
  id: ID!
  account: Bytes!
  active: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type PauserChange @entity {
  id: ID!
  transaction: EthTransaction!
  account: Bytes!
  active: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type AssetSettingsStatus @entity {
  id: ID!
  tokenAddress: Bytes!
  cTokenAddress: Bytes!
  maxLoanAmount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type AssetSettingsChange @entity {
  id: ID!
  sender: Bytes!
  tokenAddress: Bytes!
  cTokenAddress: Bytes!
  maxLoanAmount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type BorrowerNoncesChange @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  borrower: Bytes!
  nonce: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type LenderNoncesChange @entity {
  id: ID!
  token: Token!
  collateralToken: CollateralToken!
  lender: Bytes!
  nonce: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}