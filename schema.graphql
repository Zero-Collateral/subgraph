enum PoolAction {
  Deposit
  Repay
  Withdraw
  Liquidate
}

enum EthEvent {
  LoanCreated
  DaiDeposited
  DaiWithdrawn
  DaiRepaid
  PaymentLiquidated
  SignerAdded
  SignerRemoved
  CollateralWithdrawn
  CollateralDeposited
}

type EthTransaction @entity {
  id: ID!
  event: EthEvent!
  from: Bytes!
  gasPrice: BigInt!
  gasSent: BigInt!
  hash: Bytes!
  index: BigInt!
  to: Bytes!
  value: BigInt!
  contract: Bytes!
  timestamp: BigInt!
  gasLimit: BigInt!
}

type Borrower @entity {
  id: ID!
  address: Bytes!
  loans: [Loan!]! @relation
}

type Loan @entity {
  id: ID!
  transaction: EthTransaction!
  borrower: Borrower!
  startDate: BigInt! # https://github.com/graphql/graphql-js/issues/1003#issuecomment-324790647
  interestRate: BigInt!
  collateralRatio: BigInt! 
  maxLoanAmount: BigInt!
  numberDays: BigInt!
  amountBorrow: BigInt!
  collateralDeposits: [CollateralD!]!
  collateralWithdrawns: [CollateralW!]!
}

type CollateralD @entity {
  id: ID!
  transaction: EthTransaction!
  loan: Loan!
  borrower: Borrower!
  amount: BigInt!
}

type CollateralW @entity {
  id: ID!
  transaction: EthTransaction!
  loan: Loan!
  borrower: Borrower!
  amount: BigInt!
}

type Signer @entity {
  id: ID!
  address: Bytes!
  active: Boolean!
}

type DaiPoolAction @entity {
  id: ID!
  transaction: EthTransaction!
  address: Bytes!
  amount: BigInt!
  action: PoolAction!
}
