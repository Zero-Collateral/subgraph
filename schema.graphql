enum LoanStatus {
  NonExistent
  TermsSet
  Active
  Closed
  Liquidated
}

type EthTransaction @entity {
  id: ID!
  event: String!
  from: Bytes!
  gasPrice: BigInt!
  gasSent: BigInt!
  hash: Bytes!
  index: BigInt!
  to: Bytes!
  value: BigInt!
  contract: Bytes!
  timestamp: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

type Loan @entity {
  id: ID!
  token: String!
  collateralToken: String!
  transaction: EthTransaction!
  borrower: Bytes!
  terms: LoanTerm!
  startDate: BigInt! # https://github.com/graphql/graphql-js/issues/1003#issuecomment-324790647
  endDate: BigInt!
  amountBorrowed: BigInt!
  status: LoanStatus!
  totalRepaidAmount: BigInt!
  totalOwedAmount: BigInt!
  nft: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type LoanTerm @entity {
  id: ID! # LoanID
  transaction: EthTransaction!
  interestRate: BigInt!
  collateralRatio: BigInt!
  maxLoanAmount: BigInt!
  duration: BigInt!
  expiryAt: BigInt!
  nonce: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type PlatformSettingStatus @entity {
  id: ID!
  settingName: String!
  value: BigInt!
  min: BigInt!
  max: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type PlatformSettingChange @entity {
  id: ID!
  transaction: EthTransaction!
  oldValue: BigInt!
  newValue: BigInt!
  from: Bytes!
  settingName: String!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type AssetSettingsStatus @entity {
  id: ID!
  tokenAddress: Bytes!
  maxLoanAmount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type AssetSettingsChange @entity {
  id: ID!
  sender: Bytes!
  tokenAddress: Bytes!
  propertyChanged: String!
  oldValue: String!
  newValue: String!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type BorrowerNoncesChange @entity {
  id: ID!
  token: String!
  collateralToken: String!
  borrower: Bytes!
  nonce: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}
