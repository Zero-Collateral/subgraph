// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EthTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EthTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EthTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EthTransaction", id.toString(), this);
  }

  static load(id: string): EthTransaction | null {
    return store.get("EthTransaction", id) as EthTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasSent(): BigInt {
    let value = this.get("gasSent");
    return value.toBigInt();
  }

  set gasSent(value: BigInt) {
    this.set("gasSent", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Borrower extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Borrower entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Borrower entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Borrower", id.toString(), this);
  }

  static load(id: string): Borrower | null {
    return store.get("Borrower", id) as Borrower | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }
}

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Loan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Loan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Loan", id.toString(), this);
  }

  static load(id: string): Loan | null {
    return store.get("Loan", id) as Loan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get terms(): string {
    let value = this.get("terms");
    return value.toString();
  }

  set terms(value: string) {
    this.set("terms", Value.fromString(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    return value.toBigInt();
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get endDate(): BigInt {
    let value = this.get("endDate");
    return value.toBigInt();
  }

  set endDate(value: BigInt) {
    this.set("endDate", Value.fromBigInt(value));
  }

  get amountBorrowed(): BigInt {
    let value = this.get("amountBorrowed");
    return value.toBigInt();
  }

  set amountBorrowed(value: BigInt) {
    this.set("amountBorrowed", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get repayments(): Array<string> {
    let value = this.get("repayments");
    return value.toStringArray();
  }

  set repayments(value: Array<string>) {
    this.set("repayments", Value.fromStringArray(value));
  }

  get totalRepaidAmount(): BigInt {
    let value = this.get("totalRepaidAmount");
    return value.toBigInt();
  }

  set totalRepaidAmount(value: BigInt) {
    this.set("totalRepaidAmount", Value.fromBigInt(value));
  }

  get totalOwedAmount(): BigInt {
    let value = this.get("totalOwedAmount");
    return value.toBigInt();
  }

  set totalOwedAmount(value: BigInt) {
    this.set("totalOwedAmount", Value.fromBigInt(value));
  }

  get collateralDeposits(): Array<string> {
    let value = this.get("collateralDeposits");
    return value.toStringArray();
  }

  set collateralDeposits(value: Array<string>) {
    this.set("collateralDeposits", Value.fromStringArray(value));
  }

  get totalCollateralDepositsAmount(): BigInt {
    let value = this.get("totalCollateralDepositsAmount");
    return value.toBigInt();
  }

  set totalCollateralDepositsAmount(value: BigInt) {
    this.set("totalCollateralDepositsAmount", Value.fromBigInt(value));
  }

  get collateralWithdrawns(): Array<string> {
    let value = this.get("collateralWithdrawns");
    return value.toStringArray();
  }

  set collateralWithdrawns(value: Array<string>) {
    this.set("collateralWithdrawns", Value.fromStringArray(value));
  }

  get totalCollateralWithdrawalsAmount(): BigInt {
    let value = this.get("totalCollateralWithdrawalsAmount");
    return value.toBigInt();
  }

  set totalCollateralWithdrawalsAmount(value: BigInt) {
    this.set("totalCollateralWithdrawalsAmount", Value.fromBigInt(value));
  }

  get liquidation(): string | null {
    let value = this.get("liquidation");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidation(value: string | null) {
    if (value === null) {
      this.unset("liquidation");
    } else {
      this.set("liquidation", Value.fromString(value as string));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LoanTerm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LoanTerm entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LoanTerm entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LoanTerm", id.toString(), this);
  }

  static load(id: string): LoanTerm | null {
    return store.get("LoanTerm", id) as LoanTerm | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    return value.toBigInt();
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get collateralRatio(): BigInt {
    let value = this.get("collateralRatio");
    return value.toBigInt();
  }

  set collateralRatio(value: BigInt) {
    this.set("collateralRatio", Value.fromBigInt(value));
  }

  get maxLoanAmount(): BigInt {
    let value = this.get("maxLoanAmount");
    return value.toBigInt();
  }

  set maxLoanAmount(value: BigInt) {
    this.set("maxLoanAmount", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get expiryAt(): BigInt {
    let value = this.get("expiryAt");
    return value.toBigInt();
  }

  set expiryAt(value: BigInt) {
    this.set("expiryAt", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Liquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Liquidation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Liquidation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Liquidation", id.toString(), this);
  }

  static load(id: string): Liquidation | null {
    return store.get("Liquidation", id) as Liquidation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get collateralOut(): BigInt {
    let value = this.get("collateralOut");
    return value.toBigInt();
  }

  set collateralOut(value: BigInt) {
    this.set("collateralOut", Value.fromBigInt(value));
  }

  get tokensIn(): BigInt {
    let value = this.get("tokensIn");
    return value.toBigInt();
  }

  set tokensIn(value: BigInt) {
    this.set("tokensIn", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LoanRepayment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LoanRepayment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LoanRepayment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LoanRepayment", id.toString(), this);
  }

  static load(id: string): LoanRepayment | null {
    return store.get("LoanRepayment", id) as LoanRepayment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get payer(): Bytes {
    let value = this.get("payer");
    return value.toBytes();
  }

  set payer(value: Bytes) {
    this.set("payer", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CollateralDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollateralDeposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollateralDeposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollateralDeposit", id.toString(), this);
  }

  static load(id: string): CollateralDeposit | null {
    return store.get("CollateralDeposit", id) as CollateralDeposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CollateralWithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollateralWithdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollateralWithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollateralWithdraw", id.toString(), this);
  }

  static load(id: string): CollateralWithdraw | null {
    return store.get("CollateralWithdraw", id) as CollateralWithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LendingPoolStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LendingPoolStatus entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolStatus", id.toString(), this);
  }

  static load(id: string): LendingPoolStatus | null {
    return store.get("LendingPoolStatus", id) as LendingPoolStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platformToken(): string {
    let value = this.get("platformToken");
    return value.toString();
  }

  set platformToken(value: string) {
    this.set("platformToken", Value.fromString(value));
  }

  get lendingToken(): string {
    let value = this.get("lendingToken");
    return value.toString();
  }

  set lendingToken(value: string) {
    this.set("lendingToken", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LendingPoolChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LendingPoolChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolChange", id.toString(), this);
  }

  static load(id: string): LendingPoolChange | null {
    return store.get("LendingPoolChange", id) as LendingPoolChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platformToken(): string {
    let value = this.get("platformToken");
    return value.toString();
  }

  set platformToken(value: string) {
    this.set("platformToken", Value.fromString(value));
  }

  get lendingToken(): string {
    let value = this.get("lendingToken");
    return value.toString();
  }

  set lendingToken(value: string) {
    this.set("lendingToken", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get action(): string {
    let value = this.get("action");
    return value.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class InterestSubmitted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InterestSubmitted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InterestSubmitted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InterestSubmitted", id.toString(), this);
  }

  static load(id: string): InterestSubmitted | null {
    return store.get("InterestSubmitted", id) as InterestSubmitted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get signer(): Bytes {
    let value = this.get("signer");
    return value.toBytes();
  }

  set signer(value: Bytes) {
    this.set("signer", Value.fromBytes(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get requestNonce(): BigInt {
    let value = this.get("requestNonce");
    return value.toBigInt();
  }

  set requestNonce(value: BigInt) {
    this.set("requestNonce", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    return value.toBigInt();
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class InterestAccepted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InterestAccepted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InterestAccepted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InterestAccepted", id.toString(), this);
  }

  static load(id: string): InterestAccepted | null {
    return store.get("InterestAccepted", id) as InterestAccepted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get requestNonce(): BigInt {
    let value = this.get("requestNonce");
    return value.toBigInt();
  }

  set requestNonce(value: BigInt) {
    this.set("requestNonce", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    return value.toBigInt();
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LoanTermsSubmitted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LoanTermsSubmitted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LoanTermsSubmitted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LoanTermsSubmitted", id.toString(), this);
  }

  static load(id: string): LoanTermsSubmitted | null {
    return store.get("LoanTermsSubmitted", id) as LoanTermsSubmitted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get signer(): Bytes {
    let value = this.get("signer");
    return value.toBytes();
  }

  set signer(value: Bytes) {
    this.set("signer", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get requestNonce(): BigInt {
    let value = this.get("requestNonce");
    return value.toBigInt();
  }

  set requestNonce(value: BigInt) {
    this.set("requestNonce", Value.fromBigInt(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    return value.toBigInt();
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get collateralRatio(): BigInt {
    let value = this.get("collateralRatio");
    return value.toBigInt();
  }

  set collateralRatio(value: BigInt) {
    this.set("collateralRatio", Value.fromBigInt(value));
  }

  get maxLoanAmount(): BigInt {
    let value = this.get("maxLoanAmount");
    return value.toBigInt();
  }

  set maxLoanAmount(value: BigInt) {
    this.set("maxLoanAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LoanTermsAccepted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LoanTermsAccepted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LoanTermsAccepted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LoanTermsAccepted", id.toString(), this);
  }

  static load(id: string): LoanTermsAccepted | null {
    return store.get("LoanTermsAccepted", id) as LoanTermsAccepted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get requestNonce(): BigInt {
    let value = this.get("requestNonce");
    return value.toBigInt();
  }

  set requestNonce(value: BigInt) {
    this.set("requestNonce", Value.fromBigInt(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    return value.toBigInt();
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get collateralRatio(): BigInt {
    let value = this.get("collateralRatio");
    return value.toBigInt();
  }

  set collateralRatio(value: BigInt) {
    this.set("collateralRatio", Value.fromBigInt(value));
  }

  get maxLoanAmount(): BigInt {
    let value = this.get("maxLoanAmount");
    return value.toBigInt();
  }

  set maxLoanAmount(value: BigInt) {
    this.set("maxLoanAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class AccruedInterestChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AccruedInterestChange entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccruedInterestChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccruedInterestChange", id.toString(), this);
  }

  static load(id: string): AccruedInterestChange | null {
    return store.get(
      "AccruedInterestChange",
      id
    ) as AccruedInterestChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get totalNotWithdrawn(): BigInt {
    let value = this.get("totalNotWithdrawn");
    return value.toBigInt();
  }

  set totalNotWithdrawn(value: BigInt) {
    this.set("totalNotWithdrawn", Value.fromBigInt(value));
  }

  get totalAccruedInterest(): BigInt {
    let value = this.get("totalAccruedInterest");
    return value.toBigInt();
  }

  set totalAccruedInterest(value: BigInt) {
    this.set("totalAccruedInterest", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class AccruedInterestWithdrawalChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AccruedInterestWithdrawalChange entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccruedInterestWithdrawalChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccruedInterestWithdrawalChange", id.toString(), this);
  }

  static load(id: string): AccruedInterestWithdrawalChange | null {
    return store.get(
      "AccruedInterestWithdrawalChange",
      id
    ) as AccruedInterestWithdrawalChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TTokenHolderBalancesStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TTokenHolderBalancesStatus entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TTokenHolderBalancesStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TTokenHolderBalancesStatus", id.toString(), this);
  }

  static load(id: string): TTokenHolderBalancesStatus | null {
    return store.get(
      "TTokenHolderBalancesStatus",
      id
    ) as TTokenHolderBalancesStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get platformToken(): string {
    let value = this.get("platformToken");
    return value.toString();
  }

  set platformToken(value: string) {
    this.set("platformToken", Value.fromString(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class TTokenHolderBalancesChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TTokenHolderBalancesChange entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TTokenHolderBalancesChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TTokenHolderBalancesChange", id.toString(), this);
  }

  static load(id: string): TTokenHolderBalancesChange | null {
    return store.get(
      "TTokenHolderBalancesChange",
      id
    ) as TTokenHolderBalancesChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get platformToken(): string {
    let value = this.get("platformToken");
    return value.toString();
  }

  set platformToken(value: string) {
    this.set("platformToken", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    return value.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PlatformSettingsStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PlatformSettingsStatus entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PlatformSettingsStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PlatformSettingsStatus", id.toString(), this);
  }

  static load(id: string): PlatformSettingsStatus | null {
    return store.get(
      "PlatformSettingsStatus",
      id
    ) as PlatformSettingsStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get settingName(): string {
    let value = this.get("settingName");
    return value.toString();
  }

  set settingName(value: string) {
    this.set("settingName", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get min(): BigInt {
    let value = this.get("min");
    return value.toBigInt();
  }

  set min(value: BigInt) {
    this.set("min", Value.fromBigInt(value));
  }

  get max(): BigInt {
    let value = this.get("max");
    return value.toBigInt();
  }

  set max(value: BigInt) {
    this.set("max", Value.fromBigInt(value));
  }

  get removed(): boolean {
    let value = this.get("removed");
    return value.toBoolean();
  }

  set removed(value: boolean) {
    this.set("removed", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PlatformSettingsChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PlatformSettingsChange entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PlatformSettingsChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PlatformSettingsChange", id.toString(), this);
  }

  static load(id: string): PlatformSettingsChange | null {
    return store.get(
      "PlatformSettingsChange",
      id
    ) as PlatformSettingsChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get oldValue(): BigInt {
    let value = this.get("oldValue");
    return value.toBigInt();
  }

  set oldValue(value: BigInt) {
    this.set("oldValue", Value.fromBigInt(value));
  }

  get newValue(): BigInt {
    let value = this.get("newValue");
    return value.toBigInt();
  }

  set newValue(value: BigInt) {
    this.set("newValue", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get settingName(): string {
    let value = this.get("settingName");
    return value.toString();
  }

  set settingName(value: string) {
    this.set("settingName", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LendingPoolPauseStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingPoolPauseStatus entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolPauseStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolPauseStatus", id.toString(), this);
  }

  static load(id: string): LendingPoolPauseStatus | null {
    return store.get(
      "LendingPoolPauseStatus",
      id
    ) as LendingPoolPauseStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingPool(): Bytes {
    let value = this.get("lendingPool");
    return value.toBytes();
  }

  set lendingPool(value: Bytes) {
    this.set("lendingPool", Value.fromBytes(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class LendingPoolPauseChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingPoolPauseChange entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolPauseChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolPauseChange", id.toString(), this);
  }

  static load(id: string): LendingPoolPauseChange | null {
    return store.get(
      "LendingPoolPauseChange",
      id
    ) as LendingPoolPauseChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get lendingPool(): Bytes {
    let value = this.get("lendingPool");
    return value.toBytes();
  }

  set lendingPool(value: Bytes) {
    this.set("lendingPool", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SignerStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SignerStatus entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SignerStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SignerStatus", id.toString(), this);
  }

  static load(id: string): SignerStatus | null {
    return store.get("SignerStatus", id) as SignerStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get removed(): boolean {
    let value = this.get("removed");
    return value.toBoolean();
  }

  set removed(value: boolean) {
    this.set("removed", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SignerChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SignerChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SignerChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SignerChange", id.toString(), this);
  }

  static load(id: string): SignerChange | null {
    return store.get("SignerChange", id) as SignerChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get removed(): boolean {
    let value = this.get("removed");
    return value.toBoolean();
  }

  set removed(value: boolean) {
    this.set("removed", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PauserStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PauserStatus entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PauserStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PauserStatus", id.toString(), this);
  }

  static load(id: string): PauserStatus | null {
    return store.get("PauserStatus", id) as PauserStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PauserChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PauserChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PauserChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PauserChange", id.toString(), this);
  }

  static load(id: string): PauserChange | null {
    return store.get("PauserChange", id) as PauserChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class AssetSettingsStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssetSettingsStatus entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssetSettingsStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssetSettingsStatus", id.toString(), this);
  }

  static load(id: string): AssetSettingsStatus | null {
    return store.get("AssetSettingsStatus", id) as AssetSettingsStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get cTokenAddress(): Bytes {
    let value = this.get("cTokenAddress");
    return value.toBytes();
  }

  set cTokenAddress(value: Bytes) {
    this.set("cTokenAddress", Value.fromBytes(value));
  }

  get maxLoanAmount(): BigInt {
    let value = this.get("maxLoanAmount");
    return value.toBigInt();
  }

  set maxLoanAmount(value: BigInt) {
    this.set("maxLoanAmount", Value.fromBigInt(value));
  }

  get removed(): boolean {
    let value = this.get("removed");
    return value.toBoolean();
  }

  set removed(value: boolean) {
    this.set("removed", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class AssetSettingsChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssetSettingsChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssetSettingsChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssetSettingsChange", id.toString(), this);
  }

  static load(id: string): AssetSettingsChange | null {
    return store.get("AssetSettingsChange", id) as AssetSettingsChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get propertyChanged(): string {
    let value = this.get("propertyChanged");
    return value.toString();
  }

  set propertyChanged(value: string) {
    this.set("propertyChanged", Value.fromString(value));
  }

  get oldValue(): string {
    let value = this.get("oldValue");
    return value.toString();
  }

  set oldValue(value: string) {
    this.set("oldValue", Value.fromString(value));
  }

  get newValue(): string {
    let value = this.get("newValue");
    return value.toString();
  }

  set newValue(value: string) {
    this.set("newValue", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class BorrowerNoncesChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BorrowerNoncesChange entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BorrowerNoncesChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BorrowerNoncesChange", id.toString(), this);
  }

  static load(id: string): BorrowerNoncesChange | null {
    return store.get("BorrowerNoncesChange", id) as BorrowerNoncesChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class LenderNoncesChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LenderNoncesChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LenderNoncesChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LenderNoncesChange", id.toString(), this);
  }

  static load(id: string): LenderNoncesChange | null {
    return store.get("LenderNoncesChange", id) as LenderNoncesChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class OracleAddressChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OracleAddressChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OracleAddressChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OracleAddressChange", id.toString(), this);
  }

  static load(id: string): OracleAddressChange | null {
    return store.get("OracleAddressChange", id) as OracleAddressChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get lendingToken(): string {
    let value = this.get("lendingToken");
    return value.toString();
  }

  set lendingToken(value: string) {
    this.set("lendingToken", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get oldOracleAddress(): Bytes {
    let value = this.get("oldOracleAddress");
    return value.toBytes();
  }

  set oldOracleAddress(value: Bytes) {
    this.set("oldOracleAddress", Value.fromBytes(value));
  }

  get newOracleAddress(): Bytes {
    let value = this.get("newOracleAddress");
    return value.toBytes();
  }

  set newOracleAddress(value: Bytes) {
    this.set("newOracleAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
