// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EthTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EthTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EthTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EthTransaction", id.toString(), this);
  }

  static load(id: string): EthTransaction | null {
    return store.get("EthTransaction", id) as EthTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasSent(): BigInt {
    let value = this.get("gasSent");
    return value.toBigInt();
  }

  set gasSent(value: BigInt) {
    this.set("gasSent", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Borrower extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Borrower entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Borrower entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Borrower", id.toString(), this);
  }

  static load(id: string): Borrower | null {
    return store.get("Borrower", id) as Borrower | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }
}

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Loan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Loan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Loan", id.toString(), this);
  }

  static load(id: string): Loan | null {
    return store.get("Loan", id) as Loan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    return value.toBigInt();
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    return value.toBigInt();
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get collateralRatio(): BigInt {
    let value = this.get("collateralRatio");
    return value.toBigInt();
  }

  set collateralRatio(value: BigInt) {
    this.set("collateralRatio", Value.fromBigInt(value));
  }

  get maxLoanAmount(): BigInt {
    let value = this.get("maxLoanAmount");
    return value.toBigInt();
  }

  set maxLoanAmount(value: BigInt) {
    this.set("maxLoanAmount", Value.fromBigInt(value));
  }

  get numberDays(): BigInt {
    let value = this.get("numberDays");
    return value.toBigInt();
  }

  set numberDays(value: BigInt) {
    this.set("numberDays", Value.fromBigInt(value));
  }

  get amountBorrow(): BigInt {
    let value = this.get("amountBorrow");
    return value.toBigInt();
  }

  set amountBorrow(value: BigInt) {
    this.set("amountBorrow", Value.fromBigInt(value));
  }

  get collateralDeposits(): Array<string> {
    let value = this.get("collateralDeposits");
    return value.toStringArray();
  }

  set collateralDeposits(value: Array<string>) {
    this.set("collateralDeposits", Value.fromStringArray(value));
  }

  get collateralWithdrawns(): Array<string> {
    let value = this.get("collateralWithdrawns");
    return value.toStringArray();
  }

  set collateralWithdrawns(value: Array<string>) {
    this.set("collateralWithdrawns", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CollateralDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollateralDeposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollateralDeposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollateralDeposit", id.toString(), this);
  }

  static load(id: string): CollateralDeposit | null {
    return store.get("CollateralDeposit", id) as CollateralDeposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CollateralWithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollateralWithdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollateralWithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollateralWithdraw", id.toString(), this);
  }

  static load(id: string): CollateralWithdraw | null {
    return store.get("CollateralWithdraw", id) as CollateralWithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Signer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Signer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Signer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Signer", id.toString(), this);
  }

  static load(id: string): Signer | null {
    return store.get("Signer", id) as Signer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class LendingPoolStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LendingPoolStatus entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolStatus", id.toString(), this);
  }

  static load(id: string): LendingPoolStatus | null {
    return store.get("LendingPoolStatus", id) as LendingPoolStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get zToken(): string {
    let value = this.get("zToken");
    return value.toString();
  }

  set zToken(value: string) {
    this.set("zToken", Value.fromString(value));
  }

  get lendingToken(): string {
    let value = this.get("lendingToken");
    return value.toString();
  }

  set lendingToken(value: string) {
    this.set("lendingToken", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get action(): string {
    let value = this.get("action");
    return value.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class InterestSubmitted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InterestSubmitted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InterestSubmitted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InterestSubmitted", id.toString(), this);
  }

  static load(id: string): InterestSubmitted | null {
    return store.get("InterestSubmitted", id) as InterestSubmitted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get signer(): Bytes {
    let value = this.get("signer");
    return value.toBytes();
  }

  set signer(value: Bytes) {
    this.set("signer", Value.fromBytes(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    return value.toBigInt();
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class InterestAccepted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InterestAccepted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InterestAccepted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InterestAccepted", id.toString(), this);
  }

  static load(id: string): InterestAccepted | null {
    return store.get("InterestAccepted", id) as InterestAccepted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    return value.toBigInt();
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get acceptedAt(): BigInt {
    let value = this.get("acceptedAt");
    return value.toBigInt();
  }

  set acceptedAt(value: BigInt) {
    this.set("acceptedAt", Value.fromBigInt(value));
  }
}

export class AccruedInterestStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AccruedInterestStatus entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccruedInterestStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccruedInterestStatus", id.toString(), this);
  }

  static load(id: string): AccruedInterestStatus | null {
    return store.get(
      "AccruedInterestStatus",
      id
    ) as AccruedInterestStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    return value.toBigInt();
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get accruedInterest(): BigInt {
    let value = this.get("accruedInterest");
    return value.toBigInt();
  }

  set accruedInterest(value: BigInt) {
    this.set("accruedInterest", Value.fromBigInt(value));
  }

  get action(): string {
    let value = this.get("action");
    return value.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class InterestUpdateStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InterestUpdateStatus entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InterestUpdateStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InterestUpdateStatus", id.toString(), this);
  }

  static load(id: string): InterestUpdateStatus | null {
    return store.get("InterestUpdateStatus", id) as InterestUpdateStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get action(): string {
    let value = this.get("action");
    return value.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }
}

export class ZTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ZTokenBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ZTokenBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ZTokenBalance", id.toString(), this);
  }

  static load(id: string): ZTokenBalance | null {
    return store.get("ZTokenBalance", id) as ZTokenBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get zToken(): string {
    let value = this.get("zToken");
    return value.toString();
  }

  set zToken(value: string) {
    this.set("zToken", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class ZTokenStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ZTokenStatus entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ZTokenStatus entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ZTokenStatus", id.toString(), this);
  }

  static load(id: string): ZTokenStatus | null {
    return store.get("ZTokenStatus", id) as ZTokenStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get zToken(): string {
    let value = this.get("zToken");
    return value.toString();
  }

  set zToken(value: string) {
    this.set("zToken", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get action(): string {
    let value = this.get("action");
    return value.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
