// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CollateralDeposited extends EthereumEvent {
  get params(): CollateralDeposited__Params {
    return new CollateralDeposited__Params(this);
  }
}

export class CollateralDeposited__Params {
  _event: CollateralDeposited;

  constructor(event: CollateralDeposited) {
    this._event = event;
  }

  get loanID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralWithdrawn extends EthereumEvent {
  get params(): CollateralWithdrawn__Params {
    return new CollateralWithdrawn__Params(this);
  }
}

export class CollateralWithdrawn__Params {
  _event: CollateralWithdrawn;

  constructor(event: CollateralWithdrawn) {
    this._event = event;
  }

  get loanID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanCreated extends EthereumEvent {
  get params(): LoanCreated__Params {
    return new LoanCreated__Params(this);
  }
}

export class LoanCreated__Params {
  _event: LoanCreated;

  constructor(event: LoanCreated) {
    this._event = event;
  }

  get loanID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get interestRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateralRatio(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get maxLoanAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get numberDays(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SignerAdded extends EthereumEvent {
  get params(): SignerAdded__Params {
    return new SignerAdded__Params(this);
  }
}

export class SignerAdded__Params {
  _event: SignerAdded;

  constructor(event: SignerAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SignerRemoved extends EthereumEvent {
  get params(): SignerRemoved__Params {
    return new SignerRemoved__Params(this);
  }
}

export class SignerRemoved__Params {
  _event: SignerRemoved;

  constructor(event: SignerRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__loansResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: Address;
  value9: boolean;
  value10: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: Address,
    value9: boolean,
    value10: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromAddress(this.value8));
    map.set("value9", EthereumValue.fromBoolean(this.value9));
    map.set("value10", EthereumValue.fromBoolean(this.value10));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  daiPool(): Address {
    let result = super.call("daiPool", []);

    return result[0].toAddress();
  }

  try_daiPool(): CallResult<Address> {
    let result = super.tryCall("daiPool", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getBorrowerLoans(borrower: Address): Array<BigInt> {
    let result = super.call("getBorrowerLoans", [
      EthereumValue.fromAddress(borrower)
    ]);

    return result[0].toBigIntArray();
  }

  try_getBorrowerLoans(borrower: Address): CallResult<Array<BigInt>> {
    let result = super.tryCall("getBorrowerLoans", [
      EthereumValue.fromAddress(borrower)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  isSigner(account: Address): boolean {
    let result = super.call("isSigner", [EthereumValue.fromAddress(account)]);

    return result[0].toBoolean();
  }

  try_isSigner(account: Address): CallResult<boolean> {
    let result = super.tryCall("isSigner", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  loanIDCounter(): BigInt {
    let result = super.call("loanIDCounter", []);

    return result[0].toBigInt();
  }

  try_loanIDCounter(): CallResult<BigInt> {
    let result = super.tryCall("loanIDCounter", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  loans(param0: BigInt): Contract__loansResult {
    let result = super.call("loans", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new Contract__loansResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toAddress(),
      result[9].toBoolean(),
      result[10].toBoolean()
    );
  }

  try_loans(param0: BigInt): CallResult<Contract__loansResult> {
    let result = super.tryCall("loans", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__loansResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toAddress(),
        value[9].toBoolean(),
        value[10].toBoolean()
      )
    );
  }

  priceOracle(): Address {
    let result = super.call("priceOracle", []);

    return result[0].toAddress();
  }

  try_priceOracle(): CallResult<Address> {
    let result = super.tryCall("priceOracle", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  signerNonceTaken(param0: Address, param1: BigInt): boolean {
    let result = super.call("signerNonceTaken", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_signerNonceTaken(param0: Address, param1: BigInt): CallResult<boolean> {
    let result = super.tryCall("signerNonceTaken", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  totalCollateral(): BigInt {
    let result = super.call("totalCollateral", []);

    return result[0].toBigInt();
  }

  try_totalCollateral(): CallResult<BigInt> {
    let result = super.tryCall("totalCollateral", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get priceOracleAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get daiPoolAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSignerCall extends EthereumCall {
  get inputs(): AddSignerCall__Inputs {
    return new AddSignerCall__Inputs(this);
  }

  get outputs(): AddSignerCall__Outputs {
    return new AddSignerCall__Outputs(this);
  }
}

export class AddSignerCall__Inputs {
  _call: AddSignerCall;

  constructor(call: AddSignerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddSignerCall__Outputs {
  _call: AddSignerCall;

  constructor(call: AddSignerCall) {
    this._call = call;
  }
}

export class DepositCollateralCall extends EthereumCall {
  get inputs(): DepositCollateralCall__Inputs {
    return new DepositCollateralCall__Inputs(this);
  }

  get outputs(): DepositCollateralCall__Outputs {
    return new DepositCollateralCall__Outputs(this);
  }
}

export class DepositCollateralCall__Inputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get loanID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCollateralCall__Outputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }
}

export class LiquidateLoanCall extends EthereumCall {
  get inputs(): LiquidateLoanCall__Inputs {
    return new LiquidateLoanCall__Inputs(this);
  }

  get outputs(): LiquidateLoanCall__Outputs {
    return new LiquidateLoanCall__Outputs(this);
  }
}

export class LiquidateLoanCall__Inputs {
  _call: LiquidateLoanCall;

  constructor(call: LiquidateLoanCall) {
    this._call = call;
  }

  get loanID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateLoanCall__Outputs {
  _call: LiquidateLoanCall;

  constructor(call: LiquidateLoanCall) {
    this._call = call;
  }
}

export class RenounceSignerCall extends EthereumCall {
  get inputs(): RenounceSignerCall__Inputs {
    return new RenounceSignerCall__Inputs(this);
  }

  get outputs(): RenounceSignerCall__Outputs {
    return new RenounceSignerCall__Outputs(this);
  }
}

export class RenounceSignerCall__Inputs {
  _call: RenounceSignerCall;

  constructor(call: RenounceSignerCall) {
    this._call = call;
  }
}

export class RenounceSignerCall__Outputs {
  _call: RenounceSignerCall;

  constructor(call: RenounceSignerCall) {
    this._call = call;
  }
}

export class RepayDaiCall extends EthereumCall {
  get inputs(): RepayDaiCall__Inputs {
    return new RepayDaiCall__Inputs(this);
  }

  get outputs(): RepayDaiCall__Outputs {
    return new RepayDaiCall__Outputs(this);
  }
}

export class RepayDaiCall__Inputs {
  _call: RepayDaiCall;

  constructor(call: RepayDaiCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get loanID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayDaiCall__Outputs {
  _call: RepayDaiCall;

  constructor(call: RepayDaiCall) {
    this._call = call;
  }
}

export class TakeOutLoanCall extends EthereumCall {
  get inputs(): TakeOutLoanCall__Inputs {
    return new TakeOutLoanCall__Inputs(this);
  }

  get outputs(): TakeOutLoanCall__Outputs {
    return new TakeOutLoanCall__Outputs(this);
  }
}

export class TakeOutLoanCall__Inputs {
  _call: TakeOutLoanCall;

  constructor(call: TakeOutLoanCall) {
    this._call = call;
  }

  get interestRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxLoanAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get numberDays(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountBorrow(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get signature(): TakeOutLoanCallSignatureStruct {
    return this._call.inputValues[5].value.toTuple() as TakeOutLoanCallSignatureStruct;
  }
}

export class TakeOutLoanCall__Outputs {
  _call: TakeOutLoanCall;

  constructor(call: TakeOutLoanCall) {
    this._call = call;
  }

  get loanID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TakeOutLoanCallSignatureStruct extends EthereumTuple {
  get signerNonce(): BigInt {
    return this[0].toBigInt();
  }

  get v(): i32 {
    return this[1].toI32();
  }

  get r(): Bytes {
    return this[2].toBytes();
  }

  get s(): Bytes {
    return this[3].toBytes();
  }
}

export class WithdrawCollateralCall extends EthereumCall {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get loanID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }
}
